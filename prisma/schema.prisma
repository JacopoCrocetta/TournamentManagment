datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

model Users {
  id           String        @id @unique @db.Uuid
  username     String        @unique
  password     String
  email        String
  name         String
  surname      String
  Participants Participants?
  Teams        Teams?
}

model Tournaments {
  id                   String                @id @unique @db.Uuid
  tournamentName       String
  description          String
  beginDate            DateTime              @default(now()) @db.Timestamptz(6)
  endDate              DateTime              @default(now()) @db.Timestamptz(6)
  tournamentType       String
  Participants         Participants?
  Tournament_Platforms Tournament_Platforms?
  Standings            Standings?
}

model Teams {
  id        String @id @unique @db.Uuid
  name      String @unique
  tag       String
  captainId String @unique @db.Uuid
  Users     Users  @relation(fields: [captainId], references: [id], onDelete: NoAction)
  Standings Standings?
}

model Participants {
  id            String      @id @unique @db.Uuid
  userId        String      @unique @db.Uuid
  tournamentsId String      @unique @db.Uuid
  Users         Users       @relation(fields: [userId], references: [id], onDelete: Cascade)
  Tournaments   Tournaments @relation(fields: [tournamentsId], references: [id], onDelete: Cascade)
}

model Platforms {
  id                   String                @id @unique @db.Uuid
  platformName         String
  description          String
  otherDetails         String
  Tournament_Platforms Tournament_Platforms?
}

model Tournament_Platforms {
  id            String      @id @unique @db.Uuid
  tournamentsId String      @unique @db.Uuid
  platformId    String      @unique @db.Uuid
  Tournaments   Tournaments @relation(fields: [tournamentsId], references: [id], onDelete: Cascade)
  Platforms     Platforms   @relation(fields: [platformId], references: [id], onDelete: Cascade)
}

model Matches {
  id            String   @id @unique @db.Uuid
  tournamentsId String   @unique @db.Uuid
  team1Id       String   @unique @db.Uuid
  team2Id       String   @unique @db.Uuid
  winnerId      String   @unique @db.Uuid
  matchDate     DateTime
  otherDetails  String
  refereesId    String   @unique @db.Uuid
  Referees      Referees @relation(fields: [refereesId], references: [id], onDelete: Cascade)
}

model Standings {
  id            String      @id @unique @db.Uuid
  tournamentsId String      @unique @db.Uuid
  teamId        String      @unique @db.Uuid
  points        Int
  ranking       Int
  Tournaments   Tournaments @relation(fields: [tournamentsId], references: [id], onDelete: Cascade)
  Teams Teams @relation(fields: [teamId], references: [id], onDelete: Cascade)
}

model Referees {
  id           String   @id @unique @db.Uuid
  refereesName String
  otherDetails String
  Matches      Matches?
}
